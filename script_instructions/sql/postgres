\list - show database
\du - show users

Most \d commands support additional param of __schema__.name__ and accept wildcards like *.*

    \q: Quit/Exit
    \c __database__: Connect to a database
    \d __table__: Show table definition including triggers
    \dt *.*: List tables from all schemas (if *.* is omitted will only show SEARCH_PATH ones)
    \l: List databases
    \dn: List schemas
    \df: List functions
    \dv: List views
    \di: List indexes
    \df+ __function__ : Show function SQL code.
    \x: Pretty-format query results instead of the not-so-useful ASCII tables
    \copy (SELECT * FROM __table_name__) TO 'file_path_and_name.csv' WITH CSV: Export a table as CSV

User Related:

    \du: List users
    \du __username__: List a username if present.
    create role __test1__: Create a role with an existing username.
    create role __test2__ noinherit login password __passsword__;: Create a role with username and password.
    set role __test__;: Change role for current session to __test__.
    grant __test2__ to __test1__;: Allow __test1__ to set its role as __test2__

# To see where the data directory
show data_directory;
# To see all the run-time parameters
show all;

# see count rows of each table
SELECT schemaname,relname,n_live_tup 
   FROM pg_stat_user_tables 
   ORDER BY n_live_tup DESC;

# dump
/usr/pgsql-10/bin/pg_dump session_storage > backups/session_storage.sql

# formula connections and shared buffers
shared_buffers < (RAM - padding) && (current_ram_use / max_connections) * desired_connections < (RAM - padding) && (current_ram_use / max_connections) * desired_connections < shared_buffers
shared_buffers < (RAM - padding)
(current_ram_use / max_connections) * desired_connections < (RAM - padding)
(current_ram_use / max_connections) * desired_connections < shared_buffers

2000/1000*1000

# show connection
select * from pg_stat_activity ;

# dbsize - https://wiki.postgresql.org/wiki/Disk_Usage
SELECT d.datname AS Name,  pg_catalog.pg_get_userbyid(d.datdba) AS Owner,
    CASE WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT')
        THEN pg_catalog.pg_size_pretty(pg_catalog.pg_database_size(d.datname))
        ELSE 'No Access'
    END AS SIZE
FROM pg_catalog.pg_database d
    ORDER BY
    CASE WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT')
        THEN pg_catalog.pg_database_size(d.datname)
        ELSE NULL
    END DESC -- nulls first
    LIMIT 20;
