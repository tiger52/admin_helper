variables:
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: ""

stages:
  - build
  - test
  - docs
  - deploy_db
  - deploy_test
  - deploy_stage
  - release
  - deploy
  - deploy_test
  - deploy_stage

cache:
  key: "$CI_PIPELINE_ID"
  paths:
    - _build

build:
  stage: build
  script:
    - erl -eval 'erlang:display("Erlang v" ++ erlang:system_info(otp_release)), halt().'  -noshell
    - profile=$CI_BUILD_REF_NAME make

unit tests:
  stage: test
  script:
    - erl -eval 'erlang:display(erlang:system_info(system_version)), halt().' -noshell
    - profile=$CI_BUILD_REF_NAME make eunit

common tests:
  stage: test
  services:
    - name: gitlab.example:4567/asdfgh/utility/postgres
      alias: pg.tst
  script:
    - erl -eval 'erlang:display(erlang:system_info(system_version)), halt().' -noshell
    - profile=$CI_BUILD_REF_NAME make ct

xref:
  stage: test
  script:
    - erl -eval 'erlang:display(erlang:system_info(system_version)), halt().' -noshell
    - profile=$CI_BUILD_REF_NAME make xref

dialyze:
  stage: test
  script:
    - erl -eval 'erlang:display("Erlang v" ++ erlang:system_info(otp_release)), halt().'  -noshell
    - profile=$CI_BUILD_REF_NAME make dialyze

code style:
  script:
    - elvis rock --config priv/elvis.config

cover report:
  stage: docs
  script:
    - profile=test make cover-report

all docs:
  stage: docs
  script:
    - profile=$CI_BUILD_REF_NAME make docs

swagger:
  stage: docs
  only:
    - devel
  script:
    - rebar3 as devel compile
    - sh ./swagger.sh $CI_BUILD_REF_NAME &&
      scp swagger.json skipper@de2np02d.dev.example:/opt/swagger/platform/cms_mng/

deploy devel:
  stage: deploy
  only:
    - devel
  script:
    - ssh skipper@de2np04d.dev.example "sh -c 'hostname &&
      mkdir -p ~/app &&
      cd ~/app &&
      git clone -b $CI_BUILD_REF_NAME git@gitlab.example:asdfgh/cms_mng.git ;
      cd cms_mng &&
      git checkout $CI_BUILD_REF_NAME &&
      git pull &&
      rebar3 as $CI_BUILD_REF_NAME release &&
      _build/$CI_BUILD_REF_NAME/rel/cms_mng/bin/cms_mng stop ;
      _build/$CI_BUILD_REF_NAME/rel/cms_mng/bin/cms_mng start'"

build docker:
  stage: release
  image: gitlab.example:4567/asdfgh/utility/docker:latest
  services:
    - name: gitlab.example:4567/asdfgh/utility/docker:dind
      command: ["--insecure-registry=gitlab.example:4567","--dns=10.120.12.120"]
      alias: docker
  only:
    - tags
    - devel
    - docker
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - echo $CONTAINER_RELEASE_IMAGE
  script:
    - docker run --rm -v $CI_PROJECT_DIR:/app -w /app --name ci-temp-docker -t $CI_REGISTRY/asdfgh/utility/erlang sh -c "rebar3 as devel_docker tar"
    - docker pull $CONTAINER_RELEASE_IMAGE:test || true
    - docker build --cache-from $CONTAINER_RELEASE_IMAGE:test -t $CONTAINER_RELEASE_IMAGE:test -t $CONTAINER_RELEASE_IMAGE:$CI_COMMIT_SHA .
    - docker push $CONTAINER_RELEASE_IMAGE:test
    - docker push $CONTAINER_RELEASE_IMAGE:$CI_COMMIT_SHA

build docker:
  stage: release
  image: $CI_REGISTRY/asdfgh/utility/docker:latest
  variables:
    CONTAINER_RELEASE_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH
  services:
    - name: $CI_REGISTRY/asdfgh/utility/docker:dind
      command: ["--insecure-registry=gitlab.example:4567","--dns=10.120.12.120"]
      alias: docker
  only:
    - devel
    - stage
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  script:
    - docker run --rm -v $CI_PROJECT_DIR:/app -w /app --name ci-temp-docker -t gitlab.example:4567/asdfgh/utility/erlang:21-ci sh -c "rebar3 as devel_docker tar"
    - docker pull $CONTAINER_RELEASE_IMAGE:test || true
    - docker build --cache-from $CONTAINER_RELEASE_IMAGE:test -t $CONTAINER_RELEASE_IMAGE:test -t $CONTAINER_RELEASE_IMAGE:$CI_COMMIT_SHA .
    - docker push $CONTAINER_RELEASE_IMAGE:test
    - docker push $CONTAINER_RELEASE_IMAGE:$CI_COMMIT_SHA

.deploy to k8s: &deploy_to_k8s
  stage: deploy
  image: $CI_REGISTRY/asdfgh/utility/kubectl:latest
  when: manual
  only:
    - devel
    - stage
  script:
    - envsubst < k8s.yaml > generated.k8s.yaml
    - kubectl apply -n $K8SNAMESPACE -f generated.k8s.yaml


deploy stage:
  stage: deploy_stage
  environment:
    name: stage
  variables:
    K8SNAMESPACE: platform-stage
    ERLCOOKIE: pl-cokie
  <<: *deploy_to_k8s

deploy test:
  stage: deploy_test
  environment:
    name: test
  variables:
    K8SNAMESPACE: platform-test
    ERLCOOKIE: pl-cokie
  <<: *deploy_to_k8s

